// High-quality sample documentation to showcase the system's capabilities
export const sampleDocumentation = `# User Authentication Service

## Overview

A secure authentication service built with Python FastAPI, featuring JWT tokens and comprehensive user management.

## Key Features

- JWT-based authentication
- Password hashing with bcrypt
- User registration and login
- Session management
- Input validation

## API Endpoints

### Authentication

**POST /auth/login** - User login
- Authenticates user credentials
- Returns JWT token on success
- Handles login validation

**POST /auth/register** - User registration  
- Creates new user account
- Validates input data
- Returns user confirmation

**POST /auth/logout** - User logout
- Invalidates current session
- Clears authentication tokens
- Handles cleanup

### User Management

**GET /users/profile** - Get user profile
- Retrieves current user information
- Returns profile data
- Requires authentication

**PUT /users/profile** - Update user profile
- Updates user information
- Validates input changes
- Returns updated profile

## Code Example

\`\`\`python
from fastapi import FastAPI, HTTPException
from passlib.context import CryptContext
import jwt

app = FastAPI()
pwd_context = CryptContext(schemes=["bcrypt"])

class AuthService:
    def authenticate_user(self, email: str, password: str):
        user = get_user_by_email(email)
        if user and pwd_context.verify(password, user.password_hash):
            token = create_jwt_token(user.id)
            return {"token": token, "user": user}
        raise HTTPException(401, "Invalid credentials")
\`\`\`

## Security Features

- Password hashing with bcrypt
- JWT token expiration
- Input sanitization
- CORS protection

## Testing

- 95% code coverage
- Unit tests for all endpoints
- Integration tests included

*Generated by AI-Powered Documentation System*`;

// Sample generator metadata
export const sampleGenerator = "AI Documentation Generator";
