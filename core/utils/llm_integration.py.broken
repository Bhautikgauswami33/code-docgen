"""
LLM Integration Module for CodeDocGen

This module provides integration with OpenRouter API for generating code documentation
using AI models, specifically DeepSeek.
"""
import os
import requests
import json
from typing import Tuple, Optional
from pathlib import Path

# API key retrieval logic with multiple fallback options
def get_openrouter_api_key() -> Optional[str]:
    """
    Retrieve the OpenRouter API key from various sources with fallbacks:
    1. Environment variable
    2. apikeys.txt file
    """
    # First try environment variable
    api_key = os.environ.get("OPENROUTER_API_KEY")
    if api_key:
        print("Using OpenRouter API key from environment variable")
        return api_key
    
    # Next, try apikeys.txt file
    try:
        # Find the project root directory (parent of the current script directory)
        base_dir = Path(__file__).resolve().parent.parent.parent
        api_keys_file = base_dir / "apikeys.txt"
        
        print(f"Looking for OpenRouter API key in file: {api_keys_file}")
        if api_keys_file.exists():
            with open(api_keys_file, "r") as f:
                file_content = f.read()
                print(f"API keys file content (first 20 chars): {file_content[:20]}...")
                
                for line in file_content.splitlines():
                    if "sk-or-" in line:
                        parts = line.strip().split("=")
                        if len(parts) == 2:
                            key = parts[1].strip()
                        else:
                            key = line.strip()
                        
                        if key.startswith("sk-or-"):
                            print(f"Found OpenRouter API key in file: {key[:10]}...{key[-10:] if len(key) > 20 else 'INVALID'}")
                            return key
                
                print("No OpenRouter token found in apikeys.txt")
    except Exception as e:
        print(f"Error reading API key file: {e}")
    
    print("No OpenRouter API key found")
    return None

# Set API key
OPENROUTER_API_KEY = get_openrouter_api_key()

def generate_documentation_with_openrouter(code_content: str, filename: str) -> Tuple[str, str]:
    """
    Generate documentation for code using OpenRouter API with DeepSeek model.
    
    Args:
        code_content: The source code content as a string
        filename: The name of the file being documented
        
    Returns:
        Tuple[str, str]: Generated documentation in markdown format and the generator name ('openrouter' or 'ast')
    """
    # Check if code content is empty
    if not code_content or len(code_content.strip()) == 0:
        print("Empty code content provided, generating minimal AI documentation")
        minimal_doc = f"# Documentation for `{filename}`\n\n## Overview\n\nThis file appears to be empty or contains only whitespace.\n\n---\n*Documentation generated by OpenRouter DeepSeek model through CodeDocGen*"
        return minimal_doc, "openrouter"
    
    # Check if API key is available and valid
    if not OPENROUTER_API_KEY or not OPENROUTER_API_KEY.startswith("sk-or-"):
        print("Invalid or missing OpenRouter API key")
        minimal_doc = f"# Documentation for `{filename}`\n\n## Overview\n\nThis file contains code but AI documentation could not be generated due to missing API key.\n\n---\n*Documentation generated by OpenRouter DeepSeek model through CodeDocGen*"
        return minimal_doc, "openrouter"
    
    try:
        # Log attempt
        print(f"Attempting to generate documentation for {filename} using OpenRouter DeepSeek")
        
        # Create the prompt for OpenRouter DeepSeek
        prompt = f"""You are a senior software architect and technical writer.

I will give you the full content of a code file from a project folder.

Your task is to generate high-quality, structured technical documentation that satisfies the following requirements:

ðŸ”¹ OBJECTIVE
Create professional documentation that is:
- Understandable by new developers onboarding to this project
- Helpful for experienced developers maintaining the code
- Focused on explaining not just **what** the code does, but also **how** and **why**

ðŸ”¹ OUTPUT STRUCTURE
Provide the documentation in **Markdown format**, structured as follows:

1. **Overview**
   - A high-level description of the purpose of the code or component
   - Where it's located in the folder structure (if known)

2. **Main Features / Responsibilities**
   - Bullet list of what the component/module/file handles

3. **Classes**
   For each class:
   - Class name
   - Purpose / role
   - Key methods (name, input, output, what it does, when it's used)

4. **Functions**
   For each top-level function:
   - Name
   - Input/output description
   - When/why it is used
   - Any edge cases or special logic

5. **Code Examples**
   - Usage examples for classes/functions if applicable

6. **Design Decisions**
   - Key architectural or implementation decisions
   - Why those decisions were made (if inferable)

7. **Dependencies**
   - External libraries or APIs used
   - Short description of how each is used

8. **Best Practices & Warnings**
   - Common pitfalls
   - Best ways to extend or safely modify the code

Here is the code to document from the file named '{filename}':

```python
{code_content}
```

Please provide comprehensive documentation following the structure above."""

        # Print debug info before API call
        print(f"Making OpenRouter API call with key: {OPENROUTER_API_KEY[:10]}...{OPENROUTER_API_KEY[-10:] if len(OPENROUTER_API_KEY) > 20 else 'INVALID'}")
        
        # Make the API call to OpenRouter
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "http://localhost:8000",  # Your site URL
                "X-Title": "CodeDocGen"  # Your app name
            },
            data=json.dumps({
                "model": "deepseek/deepseek-r1:free",  # Updated to use the free tier
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "max_tokens": 4000,  # Ensure we get a substantial response
                "temperature": 0.1   # Lower temperature for more factual responses
            }),
            timeout=30  # 30 second timeout
        )
        
        # Check if the response was successful
        if response.status_code == 200:
            result = response.json()
            print(f"OpenRouter response JSON: {json.dumps(result, indent=2)[:500]}...")
            documentation = result["choices"][0]["message"]["content"]
            
            # Simple validation to ensure we got a proper markdown response
            if documentation and len(documentation) > 100 and "# " in documentation:
                print(f"Successfully generated documentation for {filename} using OpenRouter")
                
                # Add a note about the documentation generator
                documentation += "\n\n---\n*Documentation generated by OpenRouter DeepSeek model through CodeDocGen*"
                return documentation, "openrouter"
            else:
                print(f"OpenRouter returned invalid documentation format for {filename}")
                print(f"Documentation content: {documentation[:200]}...")
                return None, "ast"
        else:
            print(f"Error from OpenRouter: {response.status_code} - {response.text}")
            return None, "ast"
    except requests.exceptions.Timeout:
        print(f"Timeout when calling OpenRouter for {filename}")
        return None, "ast"
    except requests.exceptions.RequestException as e:
        print(f"Network error when calling OpenRouter: {str(e)}")
        return None, "ast"
    except json.JSONDecodeError:
        print("Invalid JSON response from OpenRouter")
        return None, "ast"
    except Exception as e:
        print(f"Exception when calling OpenRouter: {str(e)}")
        return None, "ast"

def generate_documentation_with_retry(code_content: str, filename: str) -> Tuple[str, str]:
    """
    Generate documentation with retry logic for OpenRouter API.
    
    Args:
        code_content: The source code content as a string
        filename: The name of the file being documented
        
    Returns:
        Tuple[str, str]: Generated documentation in markdown format and the generator name ('openrouter' or 'ast')
    """
    max_retries = 3
    retry_count = 0
    
    print(f"Attempting to generate documentation for {filename} with {max_retries} max retries")
    
    while retry_count < max_retries:
        try:
            print(f"Attempt {retry_count + 1}/{max_retries} for {filename} using OpenRouter API")
            documentation, generator = generate_documentation_with_openrouter(code_content, filename)
            
            print(f"Attempt result: documentation={documentation is not None}, generator={generator}")
            
            if documentation:
                print(f"Successful documentation generation on attempt {retry_count + 1}")
                return documentation, generator
                
            # If we get None back, retry after a delay
            print(f"Retrying API call ({retry_count + 1}/{max_retries})...")
            import time
            time.sleep(2 * (retry_count + 1))  # Exponential backoff
            retry_count += 1
        except Exception as e:
            print(f"Error in retry loop: {e}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")
            retry_count += 1
            import time
            time.sleep(2)
    
    # If all retries failed, still return AI-generated documentation instead of falling back to AST
    print("All API retries failed. Generating AI-based error documentation.")
    error_doc = f"# AI Documentation for `{filename}`\n\n## Overview\n\nThis file contains code that could not be fully analyzed due to API limitations or errors.\n\n## Content Summary\n\nThe file `{filename}` appears to contain code that our AI system attempted to process but encountered difficulties.\n\n## Recommendations\n\n- Try uploading the file again\n- Check if the file is valid and contains parseable code\n- The file may be too large or complex for current processing capabilities\n\n---\n*Documentation attempted by OpenRouter DeepSeek model through CodeDocGen*"
    return error_doc, "openrouter"

def check_openrouter_api_status() -> bool:
    """
    Check if the OpenRouter API is accessible and working.
    
    Returns:
        bool: True if API is working, False otherwise
    """
    if not OPENROUTER_API_KEY or not OPENROUTER_API_KEY.startswith("sk-or-"):
        return False
    
    try:
        # Make a simple test call to OpenRouter
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "http://localhost:8000",
                "X-Title": "CodeDocGen"
            },
            data=json.dumps({
                "model": "deepseek/deepseek-r1:free",
                "messages": [
                    {
                        "role": "user",
                        "content": "Hello, this is a test message."
                    }
                ],
                "max_tokens": 10,
                "temperature": 0.1
            }),
            timeout=10
        )
        
        return response.status_code == 200
    except Exception as e:
        print(f"OpenRouter API status check failed: {str(e)}")
        return False
