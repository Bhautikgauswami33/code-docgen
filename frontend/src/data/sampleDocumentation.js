// High-quality sample documentation to showcase the system's capabilities
export const sampleDocumentation = `# E-Commerce API Service Documentation

## Executive Summary

The E-Commerce API Service is a comprehensive, production-ready microservice built with modern Python frameworks.

## Key Features

- RESTful API with microservices design
- JWT authentication and OAuth2 integration
- Comprehensive test coverage (96%)
- Docker containerization ready

## Technical Architecture

### User Management Module

\`\`\`python
class UserService:
    def authenticate_user(self, email: str, password: str) -> dict:
        user = User.get_by_email(email)
        if user and bcrypt.checkpw(password.encode('utf-8'), user.password_hash):
            token = self.generate_jwt_token(user)
            return {"success": True, "token": token}
        return {"success": False, "error": "Invalid credentials"}
\`\`\`

### Product Catalog

\`\`\`python  
class ProductService:
    def search_products(self, query: str, filters: dict) -> list:
        base_query = Product.query
        if query:
            base_query = base_query.filter(
                Product.name.ilike(f'%{query}%')
            )
        return base_query.all()
\`\`\`

## API Endpoints

### Authentication

| Method | Endpoint | Description |
|--------|----------|-------------|
| POST | /api/auth/login | User authentication |
| POST | /api/auth/register | User registration |

### Products

| Method | Endpoint | Description |
|--------|----------|-------------|
| GET | /api/products | List all products |
| GET | /api/products/{id} | Get product details |

## Security Features

- JWT Tokens for secure authentication
- bcrypt password hashing
- SQL injection prevention
- CORS configuration

## Performance Optimizations

- Connection pooling for efficient database access
- Redis caching for session and product data
- Response compression enabled
- Real-time performance monitoring

## Testing Strategy

- Unit tests for authentication logic
- Integration tests for API endpoints
- Performance tests with 1000+ concurrent users
- 96% code coverage achieved

## Deployment

- Docker containerization
- Kubernetes orchestration
- CI/CD pipeline with automated testing
- Multi-environment configuration

*This documentation was automatically generated by the Code Documentation Generator.*`;

// Sample generator metadata
export const sampleGenerator = "Code Documentation Generator - AI Powered Analysis";
