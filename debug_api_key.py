import os
import sys
import traceback
from pathlib import Path

# Add the root directory to the Python path
sys.path.append(str(Path(__file__).resolve().parent))

# Print Python path for debugging
print(f"Python path: {sys.path}")

# Import the necessary modules
try:
    from core.utils.llm_integration import generate_documentation_with_retry, check_openrouter_api_status, OPENROUTER_API_KEY
    print(f"Successfully imported from llm_integration")
    print(f"API key: {OPENROUTER_API_KEY[:10]}...{OPENROUTER_API_KEY[-5:] if OPENROUTER_API_KEY and len(OPENROUTER_API_KEY) > 15 else 'INVALID'}")
except ImportError as e:
    print(f"Failed to import from llm_integration: {e}")
    traceback.print_exc()
    sys.exit(1)

def test_api_connection():
    """Test the OpenRouter API connection and key validity."""
    print("Testing API connection...")
    status = check_openrouter_api_status()
    print(f"API connection status: {status}")
    return status

def test_documentation_generation():
    """Test generating documentation for a simple Python file."""
    # Create a simple test file if it doesn't exist
    test_file_path = Path("test_file_for_api.py")
    test_code = """
def hello_world():
    \"\"\"Print a simple greeting message.\"\"\"
    print("Hello, World!")

class Person:
    \"\"\"A simple Person class.\"\"\"
    
    def __init__(self, name, age):
        \"\"\"Initialize with name and age.\"\"\"
        self.name = name
        self.age = age
        
    def greet(self):
        \"\"\"Return a greeting message.\"\"\"
        return f"Hello, my name is {self.name} and I am {self.age} years old."
"""

    with open(test_file_path, "w") as f:
        f.write(test_code)
    
    print(f"Created test file: {test_file_path}")
    print("Generating documentation...")
    
    # Read the file content
    with open(test_file_path, "r") as f:
        content = f.read()
    
    # Generate documentation
    doc, generator = generate_documentation_with_retry(content, str(test_file_path))
    
    print(f"Documentation generated using: {generator}")
    print("\nDocumentation Preview:")
    print("=" * 80)
    preview_length = min(500, len(doc))
    print(doc[:preview_length] + ("..." if len(doc) > preview_length else ""))
    print("=" * 80)
    
    # Save the documentation to a file
    output_path = Path("test_api_output.md")
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(doc)
    
    print(f"Full documentation saved to: {output_path}")
    return generator

if __name__ == "__main__":
    print("=" * 80)
    print("API CONNECTION TEST")
    print("=" * 80)
    api_ok = test_api_connection()
    
    if api_ok:
        print("\n" + "=" * 80)
        print("DOCUMENTATION GENERATION TEST")
        print("=" * 80)
        generator = test_documentation_generation()
        
        if generator != "openrouter":
            print("\n⚠️ WARNING: Documentation was not generated by OpenRouter AI.")
            print(f"Generator used: {generator}")
            print("This could mean the API key is invalid or there was an error connecting to OpenRouter.")
    else:
        print("\n❌ API connection failed. Cannot proceed with documentation generation test.")
        print("Please check your API key in the .env file.")
        print("The API key should start with 'sk-or-'.")
